#Adobe
792. Number of Matching Subsequences






class Solution:


#1
    def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        buckets = collections.defaultdict(list)
        # print(buckets)
        
        for word in words:
            buckets[word[0]].append(word)
            # print(buckets)
            
        ans = 0
            
        for c in s:
            cur_words = buckets[c]
            # print(cur_words)
            del buckets[c]
            
            for word in cur_words:
                if len(word) <= 1:
                    ans += 1
                else:
                    buckets[word[1]].append(word[1:])
                    # print(buckets)
        
        return ans












#2


    # def isSubsequence(self, s, t):  # Return true if `t` is a subsequence of `s`
    #         i = 0
    #         for c in s:
    #             if i == len(t):
    #                 return True
    #             if c == t[i]:
    #                 i += 1    
    #         return i == len(t)
    # def numMatchingSubseq(self, s: str, words: List[str]) -> int:
    #      ans = 0
    #      for word in words:
    #          if self.isSubsequence(s, word)==True:
    #             ans += 1
    #      return ans
